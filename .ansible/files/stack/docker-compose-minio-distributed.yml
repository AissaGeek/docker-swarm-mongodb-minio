x-minio-entrypoint: &minio-entrypoint
  ../assets/minio/entrypoint.sh:/entrypoint.sh:ro
x-minio-common: &minio-common
  image: minio/minio:RELEASE.2024-10-13T13-34-11Z
  entrypoint: /entrypoint.sh
  env_file:
    - ../assets/minio/.env.minio
  environment:
    MINIO_FTP_EXTERNAL_IP: "127.0.0.1"
    MINIO_FTP_PORT: "8021"
    MINIO_FTP_PASV_RANGE: "30100-30110"
    MINIO_PROMETHEUS_AUTH_TYPE: "public"
  healthcheck:
    test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
    interval: 30s
    timeout: 20s
    retries: 3

# starts 4 docker containers running minio server instances.
# TODO using nginx reverse proxy, load balancing, and access it through port 9000.
services:
  minio1:
    hostname: minio1
    <<: *minio-common
    ports:
      - "9000:9000"
      - "9001:9001"
      - "8021:8021"
      - "30100-30110:30100-30110"
    volumes:
      - minio-data1:/data
      - ../assets/minio/config/config.json:/root/.minio/config.json:ro
      - *minio-entrypoint
  minio2:
    hostname: minio2
    <<: *minio-common
    volumes:
      - minio-data2:/data
      - *minio-entrypoint
  minio3:
    hostname: minio3
    <<: *minio-common
    volumes:
      - minio-data3:/data
      - *minio-entrypoint
  minio4:
    hostname: minio4
    <<: *minio-common
    volumes:
      - minio-data4:/data
      - *minio-entrypoint

  create-buckets:
    # TODO add --rm flag to erase when done
    image: minio/mc:RELEASE.2024-03-30T15-29-52Z.fips
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 10
    env_file:
      - ../assets/minio/.env.minio
    volumes:
      - ../assets/minio/init_minio.sh:/scripts/init_minio.sh
      - ../assets/minio/config/lifecycle_deletion.json.template:/scripts/lifecycle_deletion.json.template:ro
    depends_on:
      - minio1
    entrypoint: /bin/bash /scripts/init_minio.sh
    restart: on-failure

# By default, this config uses default local driver,
volumes:
  minio-data1:
  minio-data2:
  minio-data3:
  minio-data4: